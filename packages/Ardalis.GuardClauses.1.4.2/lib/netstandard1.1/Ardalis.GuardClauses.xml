<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ardalis.GuardClauses</name>
    </assembly>
    <members>
        <member name="T:Ardalis.GuardClauses.IGuardClause">
            <summary>
            Simple interface to provide a generic mechanism to build guard clause extension methods from.
            </summary>
        </member>
        <member name="T:Ardalis.GuardClauses.Guard">
            <summary>
            An entry point to a set of Guard Clauses defined as extension methods on IGuardClause.
            </summary>
            <remarks>See http://www.weeklydevtips.com/004 on Guard Clauses</remarks>
        </member>
        <member name="P:Ardalis.GuardClauses.Guard.Against">
            <summary>
            An entry point to a set of Guard Clauses.
            </summary>
        </member>
        <member name="T:Ardalis.GuardClauses.GuardClauseExtensions">
            <summary>
            A collection of common guard clauses, implemented as extensions.
            </summary>
            <example>
            Guard.Against.Null(input, nameof(input));
            </example>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Null(Ardalis.GuardClauses.IGuardClause,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NullOrEmpty(Ardalis.GuardClauses.IGuardClause,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null.
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is an empty string.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NullOrEmpty``1(Ardalis.GuardClauses.IGuardClause,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null.
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is an empty enumerable.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NullOrWhiteSpace(Ardalis.GuardClauses.IGuardClause,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null.
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is an empty or white space string.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input" /> is less than <paramref name="rangeFrom" /> or greater than <paramref name="rangeTo" />.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.DateTime,System.String,System.DateTime,System.DateTime)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input" /> is less than <paramref name="rangeFrom" /> or greater than <paramref name="rangeTo" />.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfSQLDateRange(Ardalis.GuardClauses.IGuardClause,System.DateTime,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input" /> is not in the range of valid SqlDateTIme /> values.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.Decimal,System.String,System.Decimal,System.Decimal)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input"/> is less than <paramref name="rangeFrom"/> or greater than <paramref name="rangeTo"/>.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.Int16,System.String,System.Int16,System.Int16)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input"/> is less than <paramref name="rangeFrom"/> or greater than <paramref name="rangeTo"/>.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.Double,System.String,System.Double,System.Double)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input"/> is less than <paramref name="rangeFrom"/> or greater than <paramref name="rangeTo"/>.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.Single,System.String,System.Single,System.Single)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input"/> is less than <paramref name="rangeFrom"/> or greater than <paramref name="rangeTo"/>.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange``1(Ardalis.GuardClauses.IGuardClause,``0,System.String,``0,``0)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input"/> is less than <paramref name="rangeFrom"/> or greater than <paramref name="rangeTo"/>.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Zero(Ardalis.GuardClauses.IGuardClause,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Zero(Ardalis.GuardClauses.IGuardClause,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Zero(Ardalis.GuardClauses.IGuardClause,System.Decimal,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Zero(Ardalis.GuardClauses.IGuardClause,System.Single,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Zero(Ardalis.GuardClauses.IGuardClause,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Zero``1(Ardalis.GuardClauses.IGuardClause,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Negative(Ardalis.GuardClauses.IGuardClause,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input"/> is negative.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Negative(Ardalis.GuardClauses.IGuardClause,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input"/> is negative.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Negative(Ardalis.GuardClauses.IGuardClause,System.Decimal,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input"/> is negative.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Negative(Ardalis.GuardClauses.IGuardClause,System.Single,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input"/> is negative.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Negative(Ardalis.GuardClauses.IGuardClause,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input"/> is negative.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Negative``1(Ardalis.GuardClauses.IGuardClause,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input"/> is negative.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NegativeOrZero(Ardalis.GuardClauses.IGuardClause,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="input"/> is negative or zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NegativeOrZero(Ardalis.GuardClauses.IGuardClause,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="input"/> is negative or zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NegativeOrZero(Ardalis.GuardClauses.IGuardClause,System.Decimal,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="input"/> is negative or zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NegativeOrZero(Ardalis.GuardClauses.IGuardClause,System.Single,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="input"/> is negative or zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NegativeOrZero(Ardalis.GuardClauses.IGuardClause,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="input"/> is negative or zero.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NegativeOrZero``1(Ardalis.GuardClauses.IGuardClause,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if <paramref name="input"/> is negative or zero. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange``1(Ardalis.GuardClauses.IGuardClause,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input"/> is not a valid enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange``1(Ardalis.GuardClauses.IGuardClause,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <paramref name="input"/> is not a valid enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Default``1(Ardalis.GuardClauses.IGuardClause,``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if <paramref name="input" /> is default for that type.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Ardalis.GuardClauses.ValidatedNotNullAttribute">
            <summary>
            Add to methods that check input for null and throw if the input is null.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
    </members>
</doc>
